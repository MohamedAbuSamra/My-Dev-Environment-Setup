{
	"Sequelize migration - Add Column": {
		"scope": "javascript,typescript",
		"prefix": "migrationAddColumn",
		"body": [
			"'use strict';",
			"const { QueryInterface, DataTypes } = require('sequelize');",
			"",
			"module.exports = {",
			"\tup: async (queryInterface /** QueryInterface */, Sequelize /** typeof DataTypes */) => {",
			"\t\tconst transaction = await queryInterface.sequelize.transaction();",
			"\t\ttry {",
			"\t\t\tawait queryInterface.addColumn(",
			"\t\t\t\t'<table_name>',",
			"\t\t\t\t'<column_name>',",
			"\t\t\t\t{",
			"\t\t\t\t\ttype: Sequelize.<data_type>",
			"\t\t\t\t},",
			"\t\t\t\t{ transaction }",
			"\t\t\t);",
			"\t\t\tawait transaction.commit();",
			"\t\t} catch (err) {",
			"\t\t\tawait transaction.rollback();",
			"\t\t\tthrow err;",
			"\t\t}",
			"\t},",
			"\tdown: async (queryInterface /** QueryInterface */, Sequelize /** typeof DataTypes */) => {",
			"\t\tconst transaction = await queryInterface.sequelize.transaction();",
			"\t\ttry {",
			"\t\t\tawait queryInterface.removeColumn(",
			"\t\t\t\t'<table_name>',",
			"\t\t\t\t'<column_name>',",
			"\t\t\t\t{",
			"\t\t\t\t\ttransaction,",
			"\t\t\t\t}",
			"\t\t\t);",
			"\t\t\tawait transaction.commit();",
			"\t\t} catch (err) {",
			"\t\t\tawait transaction.rollback();",
			"\t\t\tthrow err;",
			"\t\t}",
			"\t},",
			"};"
		],
		"description": "Sequelize migration - Add Column template"
	},
	"Sequelize migration - Create Table": {
		"scope": "javascript,typescript",
		"prefix": "migrationCreateTable",
		"body": [
			"'use strict';",
			"const { QueryInterface, DataTypes } = require('sequelize');",
			"",
			"module.exports = {",
			"\tup: async (queryInterface /** QueryInterface */, Sequelize /** typeof DataTypes */) => {",
			"\t\tconst transaction = await queryInterface.sequelize.transaction();",
			"\t\ttry {",
			"\t\t\tawait queryInterface.createTable(",
			"\t\t\t\t'<table_name>',",
			"\t\t\t\t{",
			"\t\t\t\t\t<column_name>: {",
			"\t\t\t\t\t\ttype: Sequelize.<data_type>,",
			"\t\t\t\t\t},",
			"\t\t\t\t\t// Add more columns here",
			"\t\t\t\t},",
			"\t\t\t\t{ transaction }",
			"\t\t\t);",
			"\t\t\tawait transaction.commit();",
			"\t\t} catch (err) {",
			"\t\t\tawait transaction.rollback();",
			"\t\t\tthrow err;",
			"\t\t}",
			"\t},",
			"\tdown: async (queryInterface /** QueryInterface */, Sequelize /** typeof DataTypes */) => {",
			"\t\tconst transaction = await queryInterface.sequelize.transaction();",
			"\t\ttry {",
			"\t\t\tawait queryInterface.dropTable('<table_name>', { transaction });",
			"\t\t\tawait transaction.commit();",
			"\t\t} catch (err) {",
			"\t\t\tawait transaction.rollback();",
			"\t\t\tthrow err;",
			"\t\t}",
			"\t},",
			"};"
		],
		"description": "Sequelize migration - Create Table template"
	},
	"Sequelize migration - Delete Table": {
		"scope": "javascript,typescript",
		"prefix": "migrationDeleteTable",
		"body": [
			"'use strict';",
			"const { QueryInterface } = require('sequelize');",
			"",
			"module.exports = {",
			"\tup: async (queryInterface /** QueryInterface */) => {",
			"\t\tconst transaction = await queryInterface.sequelize.transaction();",
			"\t\ttry {",
			"\t\t\t// Perform delete table action here",
			"\t\t\tawait transaction.commit();",
			"\t\t} catch (err) {",
			"\t\t\tawait transaction.rollback();",
			"\t\t\tthrow err;",
			"\t\t}",
			"\t},",
			"\tdown: async (queryInterface /** QueryInterface */) => {",
			"\t\tconst transaction = await queryInterface.sequelize.transaction();",
			"\t\ttry {",
			"\t\t\t// Perform rollback action here",
			"\t\t\tawait transaction.commit();",
			"\t\t} catch (err) {",
			"\t\t\tawait transaction.rollback();",
			"\t\t\tthrow err;",
			"\t\t}",
			"\t},",
			"};"
		],
		"description": "Sequelize migration - Delete Table template"
	},
	"Sequelize migration - Delete Column": {
		"scope": "javascript,typescript",
		"prefix": "migrationDeleteColumn",
		"body": [
			"'use strict';",
			"const { QueryInterface } = require('sequelize');",
			"",
			"module.exports = {",
			"\tup: async (queryInterface /** QueryInterface */) => {",
			"\t\tconst transaction = await queryInterface.sequelize.transaction();",
			"\t\ttry {",
			"\t\t\tawait queryInterface.removeColumn(",
			"\t\t\t\t'<table_name>',",
			"\t\t\t\t'<column_name>',",
			"\t\t\t\t{ transaction }",
			"\t\t\t);",
			"\t\t\tawait transaction.commit();",
			"\t\t} catch (err) {",
			"\t\t\tawait transaction.rollback();",
			"\t\t\tthrow err;",
			"\t\t}",
			"\t},",
			"\tdown: async (queryInterface /** QueryInterface */, Sequelize /** typeof DataTypes */) => {",
			"\t\tconst transaction = await queryInterface.sequelize.transaction();",
			"\t\ttry {",
			"\t\t\tawait queryInterface.addColumn(",
			"\t\t\t\t'<table_name>',",
			"\t\t\t\t'<column_name>',",
			"\t\t\t\t{",
			"\t\t\t\t\ttype: Sequelize.<data_type>",
			"\t\t\t\t},",
			"\t\t\t\t{ transaction }",
			"\t\t\t);",
			"\t\t\tawait transaction.commit();",
			"\t\t} catch (err) {",
			"\t\t\tawait transaction.rollback();",
			"\t\t\tthrow err;",
			"\t\t}",
			"\t},",
			"};"
		],
		"description": "Sequelize migration - Delete Column template"
	},
	"Sequelize migration - Change Table Name": {
		"scope": "javascript,typescript",
		"prefix": "migrationChangeTableName",
		"body": [
			"'use strict';",
			"const { QueryInterface } = require('sequelize');",
			"",
			"module.exports = {",
			"\tup: async (queryInterface /** QueryInterface */) => {",
			"\t\tconst transaction = await queryInterface.sequelize.transaction();",
			"\t\ttry {",
			"\t\t\tawait queryInterface.renameTable(",
			"\t\t\t\t'<old_table_name>',",
			"\t\t\t\t'<new_table_name>',",
			"\t\t\t\t{ transaction }",
			"\t\t\t);",
			"\t\t\tawait transaction.commit();",
			"\t\t} catch (err) {",
			"\t\t\tawait transaction.rollback();",
			"\t\t\tthrow err;",
			"\t\t}",
			"\t},",
			"\tdown: async (queryInterface /** QueryInterface */) => {",
			"\t\tconst transaction = await queryInterface.sequelize.transaction();",
			"\t\ttry {",
			"\t\t\tawait queryInterface.renameTable(",
			"\t\t\t\t'<new_table_name>',",
			"\t\t\t\t'<old_table_name>',",
			"\t\t\t\t{ transaction }",
			"\t\t\t);",
			"\t\t\tawait transaction.commit();",
			"\t\t} catch (err) {",
			"\t\t\tawait transaction.rollback();",
			"\t\t\tthrow err;",
			"\t\t}",
			"\t},",
			"};"
		],
		"description": "Sequelize migration - Change Table Name template"
	},
	"Sequelize migration - Change Column Name": {
		"scope": "javascript,typescript",
		"prefix": "migrationChangeColumnName",
		"body": [
			"'use strict';",
			"const { QueryInterface } = require('sequelize');",
			"",
			"module.exports = {",
			"\tup: async (queryInterface /** QueryInterface */) => {",
			"\t\tconst transaction = await queryInterface.sequelize.transaction();",
			"\t\ttry {",
			"\t\t\tawait queryInterface.renameColumn(",
			"\t\t\t\t'<table_name>',",
			"\t\t\t\t'<old_column_name>',",
			"\t\t\t\t'<new_column_name>',",
			"\t\t\t\t{ transaction }",
			"\t\t\t);",
			"\t\t\tawait transaction.commit();",
			"\t\t} catch (err) {",
			"\t\t\tawait transaction.rollback();",
			"\t\t\tthrow err;",
			"\t\t}",
			"\t},",
			"\tdown: async (queryInterface /** QueryInterface */) => {",
			"\t\tconst transaction = await queryInterface.sequelize.transaction();",
			"\t\ttry {",
			"\t\t\tawait queryInterface.renameColumn(",
			"\t\t\t\t'<table_name>',",
			"\t\t\t\t'<new_column_name>',",
			"\t\t\t\t'<old_column_name>',",
			"\t\t\t\t{ transaction }",
			"\t\t\t);",
			"\t\t\tawait transaction.commit();",
			"\t\t} catch (err) {",
			"\t\t\tawait transaction.rollback();",
			"\t\t\tthrow err;",
			"\t\t}",
			"\t},",
			"};"
		],
		"description": "Sequelize migration - Change Column Name template"
	},
	"Vue.js file template": {
		"prefix": "vueTemplate",
		"body": [
			"<template>",
			"\t<div />",
			"</template>",
			"<script lang=\"ts\">",
			"import Vue from 'vue';",
			"",
			"export default Vue.extend({",
			"\tprops: {",
			"\t\tdata: {",
			"\t\t\ttype: Object,",
			"\t\t\trequired: true",
			"\t\t}",
			"\t},",
			"\tdata() {",
			"\t\treturn {",
			"\t\t\t// Add your data properties here",
			"\t\t};",
			"\t},",
			"\twatch: {",
			"\t\t// Add your watch properties here",
			"\t},",
			"\tcomputed: {",
			"\t\t// Add your computed properties here",
			"\t},",
			"\tmethods: {",
			"\t\t// Add your methods here",
			"\t}",
			"});",
			"</script>"
		],
		"description": "Default Vue.js file template"
	},
	"Vue.js 3 file template": {
		"prefix": "vue3Template",
		"body": [
			"<template>",
			"\t<div />",
			"</template>",
			"<script lang=\"ts\">",
			"import { defineComponent } from 'vue';",
			"",
			"export default defineComponent({",
			"\tprops: {",
			"\t\tdata: {",
			"\t\t\ttype: Object,",
			"\t\t\trequired: true",
			"\t\t}",
			"\t},",
			"\tdata() {",
			"\t\treturn {",
			"\t\t\t// Add your data properties here",
			"\t\t};",
			"\t},",
			"\tcomputed: {",
			"\t\t// Add your computed properties here",
			"\t},",
			"\twatch: {",
			"\t\t// Add your watch properties here",
			"\t},",
			"\tmethods: {",
			"\t\t// Add your methods here",
			"\t}",
			"});",
			"</script>",
			"<style scoped>",
			"\t/* Add your component styles here */",
			"</style>"
		],
		"description": "Default Vue.js 3 file template using the Options API"
	},
	"Sequelize model": {
		"scope": "javascript,typescript",
		"prefix": "modelSequelize",
		"body": [
			"const Sequelize = require('sequelize');",
			"",
			"class ${1:ModelName} extends Sequelize.Model {",
			"\tstatic init(sequelize, DataTypes) {",
			"\t\treturn super.init(",
			"\t\t\t{",
			"\t\t\t\t${2:attribute1}: DataTypes.${3:dataType1},",
			"\t\t\t\t${4:attribute2}: DataTypes.${5:dataType2},",
			"\t\t\t\t${6:attribute3}: DataTypes.${7:dataType3},",
			"\t\t\t},",
			"\t\t\t{",
			"\t\t\t\ttableName: '${8:tableName}',",
			"\t\t\t\ttimestamps: ${9:false},",
			"\t\t\t\tsequelize,",
			"\t\t\t}",
			"\t\t);",
			"\t}",
			"",
			"\tstatic associate(models) {",
			"\t\t// Add your associations here",
			"\t}",
			"}",
			"",
			"module.exports = ${1:ModelName};"
		],
		"description": "Sequelize model template"
	},
	"Express routing": {
		"scope": "javascript,typescript",
		"prefix": "routingExpress",
		"body": [
			"const { ${1:action1} } = require('./${1:action1}.js');",
			"const { ${2:action2} } = require('./${2:action2}.js');",
			"const { ${3:action3} } = require('./${3:action3}.js');",
			"const { ${4:action4} } = require('./${4:action4}.js');",
			"",
			"module.exports = {",
			"\t'/': {",
			"\t\t'get': {",
			"\t\t\t'action': ${1:action1},",
			"\t\t\t'level': 'member'",
			"\t\t},",
			"\t\t'post': {",
			"\t\t\t'action': ${2:action2},",
			"\t\t\t'level': 'member'",
			"\t\t},",
			"\t\t'put': {",
			"\t\t\t'action': ${3:action3},",
			"\t\t\t'level': 'member'",
			"\t\t},",
			"\t\t'delete': {",
			"\t\t\t'action': ${4:action4},",
			"\t\t\t'level': 'member'",
			"\t\t}",
			"\t}",
			"}"
		],
		"description": "Express routing template"
	},
	"Express controller": {
		"scope": "javascript,typescript",
		"prefix": "controllerExpress",
		"body": [
			"const models = require('../../models');",
			"const { ${1:ModelName} } = models;",
			"",
			"module.exports.${1:methodName} = async (req, res) => {",
			"\tconst { type } = req.query;",
			"\tawait { ${1:ModelName} }.findOne({ where: 'where' }).then((data) => {",
			"\t\treturn res.status(200).json(data);",
			"\t});",
			"};"
		],
		"description": "Express controller template"
	},
	"Vue Axios PUT request": {
		"scope": "javascript,typescript,vue",
		"prefix": "axiosPut",
		"body": [
			"this.$axios.put('/api/resource', data)",
			"  .then(response => {",
			"    // Handle success",
			"    console.log(response.data);",
			"  })",
			"  .catch(error => {",
			"    // Handle error",
			"    console.error(error);",
			"  });"
		],
		"description": "Vue Axios PUT request"
	},
	"Vue Axios POST request": {
		"scope": "javascript,typescript,vue",
		"prefix": "axiosPost",
		"body": [
			"this.$axios.post('/api/resource', data)",
			"  .then(response => {",
			"    // Handle success",
			"    console.log(response.data);",
			"  })",
			"  .catch(error => {",
			"    // Handle error",
			"    console.error(error);",
			"  });"
		],
		"description": "Vue Axios POST request"
	},
	"Vue Axios GET request with queries": {
		"scope": "javascript,typescript,vue",
		"prefix": "axiosGet",
		"body": [
			"this.$axios.get('/api/resource', {",
			"  params: {",
			"    queryParam1: 'value1',",
			"    queryParam2: 'value2'",
			"  }",
			"})",
			"  .then(response => {",
			"    // Handle success",
			"    console.log(response.data);",
			"  })",
			"  .catch(error => {",
			"    // Handle error",
			"    console.error(error);",
			"  });"
		],
		"description": "Vue Axios GET request with queries"
	},
	"Vue Axios DELETE request": {
		"scope": "javascript,typescript,vue",
		"prefix": "axiosDelete",
		"body": [
			"this.$axios.delete('/api/resource')",
			"  .then(response => {",
			"    // Handle success",
			"    console.log(response.data);",
			"  })",
			"  .catch(error => {",
			"    // Handle error",
			"    console.error(error);",
			"  });"
		],
		"description": "Vue Axios DELETE request"
	}
}
